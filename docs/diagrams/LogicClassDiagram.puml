@startuml
' TutBook Logic Component Class Diagram
' Handles command parsing and execution for tuition centre operations
' Commands include: add, edit, delete (persons), addClass, join (enrollment), link (parent-child), attend (sessions), addsession, deletesession
!include style.puml
skinparam arrowThickness 1.1
skinparam arrowColor LOGIC_COLOR_T4
skinparam classBackgroundColor LOGIC_COLOR

package Logic as LogicPackage {
' Parser classes handle CLI input for various tuition centre commands
package "Parser Classes" as ParserClasses{
    ' Week 10 update: added new parsers
    Class AddressBookParser
    Class DeleteCommandParser
    Class LinkCommandParser
}
Class XYZCommand
Class CommandResult
Class "{abstract}\nCommand" as Command


Class "<<interface>>\nLogic" as Logic
Class LogicManager
}

package Model {
Class HiddenModel #FFFFFF
}

package Storage {
}

Class HiddenOutside #FFFFFF
HiddenOutside ..> Logic

LogicManager .right.|> Logic
LogicManager -right->"1" ParserClasses
ParserClasses ..> XYZCommand : <<create>>

XYZCommand -up-|> Command
LogicManager .left.> Command : <<call>>

LogicManager --> Model
LogicManager --> Storage
Storage --[hidden] Model
Command .[hidden]up.> Storage
Command .right.> Model
note right of XYZCommand: XYZCommand = AddCommand, \nFindCommand, etc

' Week 10 additions
LogicManager --> AddressBookParser : parses user input
AddressBookParser --> DeleteCommandParser : creates
DeleteCommandParser --> DeleteCommand : returns
AddressBookParser --> LinkCommandParser : creates
LinkCommandParser --> LinkCommand : returns
AddressBookParser --> ListParentsCommandParser : creates
ListParentsCommandParser --> ListParentsCommand : returns
DeleteCommand -up-|> Command
LinkCommand -up-|> Command
ListParentsCommand -up-|> Command

note right of AddressBookParser
  Creates specific command parsers based on user input,
  then returns the corresponding Command object.
end note

Logic ..> CommandResult
LogicManager .down.> CommandResult
Command .up.> CommandResult : <<create>>
@enduml

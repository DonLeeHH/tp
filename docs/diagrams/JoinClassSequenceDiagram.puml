@startuml
!include style.puml
skinparam ArrowFontStyle plain

box Logic LOGIC_COLOR_T1
participant ":LogicManager" as LogicManager LOGIC_COLOR
participant ":AddressBookParser" as AddressBookParser LOGIC_COLOR
participant ":JoinClassCommandParser" as JoinParser LOGIC_COLOR
participant "jc:JoinClassCommand" as JoinCmd LOGIC_COLOR
participant "r:CommandResult" as CommandResult LOGIC_COLOR
end box

box Model MODEL_COLOR_T1
participant "m:Model" as Model MODEL_COLOR
participant "c:TuitionClass" as Class MODEL_COLOR
end box

[-> LogicManager : execute("join n/Alice Doe c/Sec2-Math-A")
activate LogicManager
LogicManager -> AddressBookParser : parseCommand(...)
activate AddressBookParser

create JoinParser
AddressBookParser -> JoinParser
activate JoinParser
JoinParser --> AddressBookParser
deactivate JoinParser

AddressBookParser -> JoinParser : parse("n/Alice Doe c/Sec2-Math-A")
activate JoinParser
JoinParser -> JoinParser : tokenize & validate prefixes
JoinParser -> JoinParser : parse name, className
create JoinCmd
JoinParser -> JoinCmd
activate JoinCmd
JoinParser --> AddressBookParser : jc
deactivate JoinParser
deactivate AddressBookParser

LogicManager -> JoinCmd : execute(m)
activate JoinCmd

JoinCmd -> Model : getAddressBook().getPersonList()
activate Model
Model --> JoinCmd : persons
deactivate Model

JoinCmd -> JoinCmd : find Student by name
JoinCmd -> JoinCmd : assert role == STUDENT (error if not)

JoinCmd -> Model : getClassByName("Sec2-Math-A")
activate Model
Model --> JoinCmd : c
deactivate Model

JoinCmd -> Class : hasStudent(student)?
JoinCmd -> Class : addStudent(student)
JoinCmd -> Model : updateClass(c) & save
activate Model
Model --> JoinCmd
deactivate Model

create CommandResult
JoinCmd -> CommandResult
CommandResult --> JoinCmd
JoinCmd --> LogicManager : r
deactivate JoinCmd
[<-- LogicManager
deactivate LogicManager

note right of JoinCmd
  Errors:
  - Student not found / ambiguous
  - Not a STUDENT
  - Class not found
  - Already enrolled
end note
@enduml
